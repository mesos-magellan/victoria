Vagrant.configure('2') do |config|

  #############
  # Functions #
  #############

  def set_linode_override_props(override)
    override.ssh.private_key_path = '~/.ssh/id_rsa'
    override.vm.box = 'linode'
    override.vm.box_url = "https://github.com/displague/vagrant-linode/raw/master/box/linode.box"
  end

  def set_linode_provider_machine_props(provider)
    provider.api_key = ENV['LINODE_API_KEY']
    provider.distribution = 'Debian 8'
    provider.datacenter = 'fremont'
    provider.plan = 'Linode 1024'
    provider.private_networking = true
  end

  def set_machine_name(machine, label, group)
    machine.vm.provider :linode do |provider, override|
      provider.label = label
      provider.group = group
    end
  end

  ##############
  # Definition #
  ##############

  NUM_SCHEDULERS = 3
  SCHED_IP_RANGE_START = 20

  ## Base
  config.vm.provider :linode do |provider, override|
    set_linode_override_props(override)
    set_linode_provider_machine_props(provider)
  end
  config.vm.provision "shell", inline: "echo Hello"
  config.vm.provision :shell, path: "bootstrap/bootstrap.sh"

  ## master
  config.vm.define "master" do |master|
    master.vm.hostname = "master"
    set_machine_name(master, "master", "magellan")
    master.vm.provision :shell, path: "bootstrap/openvpn_client.sh",
      args: "magellan_master"
    master.vm.provision :shell, path: "bootstrap/install_mesos.sh"
    # Set the mesos-master config file
    mesos_master_config = [
      "rm /etc/default/mesos-master",
      "echo \"PORT=5050\" >> /etc/default/mesos-master",
      "echo \"ZK=`cat /etc/mesos/zk`\" >> /etc/default/mesos-master",
      "echo \"IP=10.8.0.10\" >> /etc/default/mesos-master"
    ].join("\n") + "\n"
    master.vm.provision :shell, inline: mesos_master_config
    master.vm.provision :shell, path: "bootstrap/master.sh"
  end

  ## scheduler
  def configure_scheduler(i, scheduler, hostname)
    scheduler.vm.hostname = hostname
    set_machine_name(scheduler, hostname, "magellan")
    scheduler.vm.provision :shell, path: "bootstrap/openvpn_client.sh",
      args: "magellan_#{hostname}"
    # We need to install mesos because of required scheduler dependencies
    scheduler.vm.provision :shell, path: "bootstrap/install_mesos.sh"
    scheduler.vm.provision :shell, path: "bootstrap/scheduler/scheduler.sh"
    scheduler.vm.provision :shell, path: "bootstrap/scheduler/config.sh"
    scheduler.vm.provision :shell,
      path: "bootstrap/scheduler/zookeeper_config.sh",
      args: "-n #{NUM_SCHEDULERS} -r #{SCHED_IP_RANGE_START} -i #{i}"
    scheduler.vm.provision :shell, path: "bootstrap/scheduler/scheduler_post.sh"
  end
  (1..NUM_SCHEDULERS).each do |i|
    sched_num = "#{i}".rjust(3, '0')
    sched_name = "scheduler#{sched_num}"
    config.vm.define sched_name do |scheduler|
      configure_scheduler(i, scheduler, sched_name)
    end
  end

  ## Agents
  NUM_AGENTS = 5
  MAX_AGENTS = 100

  def configure_agent(i, agent, hostname)
    agent.vm.hostname = hostname
    set_machine_name(agent, hostname, "magellan")
    # vagrant-linode specific; the hostname is not set properly
    fix_etc_hosts = "sed -i 's/127.0.1.1\tdebian/127.0.1.1\t#{hostname}/g' /etc/hosts"
    agent.vm.provision :shell, inline: fix_etc_hosts
    # Set up openvpn_client
    agent.vm.provision :shell, path: "bootstrap/openvpn_client.sh",
      args: "magellan"
    # Install mesos and setup mesos-slave
    agent.vm.provision :shell, path: "bootstrap/install_mesos.sh"
    # Set the mesos-slave config file
    agent_ip = "$(ip addr show tun0 | grep 'inet\b' | awk '{print $2}' | cut -d/ -f1)"
    mesos_slave_config = [
      "rm /etc/default/mesos-slave",
      "echo \"MASTER=10.8.0.10:5050\" >> /etc/default/mesos-slave",
      "echo \"PORT=5041\" >> /etc/default/mesos-slave",
      "echo \"IP=#{agent_ip}\" >> /etc/default/mesos-slave"
    ].join("\n") + "\n"
    agent.vm.provision :shell, inline: mesos_slave_config
    # Bootstrap! :D
    agent.vm.provision :shell, path: "bootstrap/agent.sh"
    # XXX
    agent.vm.synced_folder "../../traveling-sailor", "/home/vagrant/traveling-sailor"
  end

  if NUM_AGENTS > MAX_AGENTS
    raise "Too many agents (#{NUM_AGENTS})"
  end
  (1..NUM_AGENTS).each do |i|
    agent_num = "#{i}".rjust(3, '0')
    agent_name = "agent#{agent_num}"
    config.vm.define agent_name do |agent|
      configure_agent(i, agent, agent_name)
    end
  end
end
